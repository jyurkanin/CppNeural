#include "CircleSimulator.h"

CircleSimulator::CircleSimulator(std::shared_ptr<cpp_bptt::System<float>> sys) : cpp_bptt::SimulatorF(sys){}
CircleSimulator::~CircleSimulator() {}

void CircleSimulator::computePartialLossState(const VectorF &gt_x1,
					      const VectorF &x1,
					      VectorF &loss_x1_partial,
					      float &loss)
{
  float x[4];
  float y[3];
  float v[10];
  
  int idx = 0;
  for(int i = 0; i < gt_x1.size(); i++)
  {
    x[i+idx] = x1[i];
  }
  idx += gt_x1.size();
  for(int i = 0; i < x1.size(); i++)
  {
    x[i+idx] = gt_x1[i];
  }
  idx += x1.size();

   v[0] = x[0] * x[0];
   v[1] = x[1] * x[1];
   v[2] = x[0] * x[1];
   v[3] = tanhf(0.0340188 * x[0] + 0.0411647 * x[1] + -0.0222225 * v[0] + -0.0135216 * v[1] + 0.0135712 * v[2]);
   v[4] = tanhf(-0.0105617 * x[0] + -0.0302449 * x[1] + 0.005397 * v[0] + 0.00134009 * v[1] + 0.0217297 * v[2]);
   v[5] = tanhf(0.0283099 * x[0] + -0.0164777 * x[1] + -0.00226029 * v[0] + 0.045223 * v[1] + -0.0358397 * v[2]);
   v[2] = tanhf(0.029844 * x[0] + 0.026823 * x[1] + 0.0128871 * v[0] + 0.0416195 * v[1] + 0.0106969 * v[2]);
   v[6] = -0.0257113 * v[3] + 0.0304177 * v[4] + -0.00990556 * v[5] + -0.0391191 * v[2];
   v[7] = -0.0483699 * v[3] + -0.0362768 * v[4] + -0.0343321 * v[5] + -0.037021 * v[2];
   v[8] = expf(-10. * (fabsf(v[7]) + fabsf(v[6])));
   v[9] = v[8] * -10.;
   v[6] = ((v[6] > 0?1:(v[6] < 0?-1:0))) * v[9];
   v[9] = ((v[7] > 0?1:(v[7] < 0?-1:0))) * v[9];
   v[5] = (v[6] * -0.00990556 + v[9] * -0.0343321) * (1 - v[5] * v[5]);
   v[2] = (v[6] * -0.0391191 + v[9] * -0.037021) * (1 - v[2] * v[2]);
   v[4] = (v[6] * 0.0304177 + v[9] * -0.0362768) * (1 - v[4] * v[4]);
   v[9] = (v[6] * -0.0257113 + v[9] * -0.0483699) * (1 - v[3] * v[3]);
   v[6] = v[5] * -0.0358397 + v[2] * 0.0106969 + v[4] * 0.0217297 + v[9] * 0.0135712;
   v[1] = 0.1 - v[1] - v[0];
   v[0] = v[1] + v[1];
   v[3] = (v[5] * -0.00226029 + v[2] * 0.0128871 + v[4] * 0.005397 + v[9] * -0.0222225 - v[0]) * x[0];
   y[0] = v[5] * 0.0283099 + v[2] * 0.029844 + v[4] * -0.0105617 + v[9] * 0.0340188 + v[6] * x[1] + v[3] + v[3];
   v[0] = (v[5] * 0.045223 + v[2] * 0.0416195 + v[4] * 0.00134009 + v[9] * -0.0135216 - v[0]) * x[1];
   y[1] = v[5] * -0.0164777 + v[2] * 0.026823 + v[4] * -0.0302449 + v[9] * 0.0411647 + v[6] * x[0] + v[0] + v[0];
   y[2] = v[1] * v[1] + v[8];
  
  for(int i = 0; i < loss_x1_partial.size(); i++)
  {
    loss_x1_partial[i] = y[i];
  }
  loss = y[loss_x1_partial.size()];
}



// Lol. Lmao.

void CircleSimulator::computePartials(const VectorF &xk0,
				      const VectorF &theta,
				      const VectorF &xk1_gt,
				      VectorF &xk1,
				      VectorF &partial_state_state,
				      VectorF &partial_state_param,
				      VectorF &partial_loss_params,
				      VectorF &partial_loss_state,
				      float   &loss)
{
   float x[38];
   float y[111];
   float v[72];
   
   int idx = 0;
   for(int i = 0; i < xk0.size(); i++)
   {
      x[i+idx] = xk0[i];
   }
   idx += xk0.size();
   for(int i = 0; i < theta.size(); i++)
   {
      x[i+idx] = theta[i];
   }
   idx += theta.size();
   for(int i = 0; i < xk1_gt.size(); i++)
   {
      x[i+idx] = xk1_gt[i];
   }
   idx += xk1_gt.size();
   v[0] = x[8] * x[1];
   v[1] = x[7] * x[0];
   v[2] = x[0] * x[0];
   v[3] = x[9] * v[2];
   v[4] = x[1] * x[1];
   v[5] = x[10] * v[4];
   v[6] = x[0] * x[1];
   v[7] = x[11] * v[6];
   v[8] = tanhf(v[0] + x[23] + v[1] + v[3] + v[5] + v[7]);
   v[9] = x[3] * x[1];
   v[10] = x[2] * x[0];
   v[11] = x[4] * v[2];
   v[12] = x[5] * v[4];
   v[13] = x[6] * v[6];
   v[14] = tanhf(v[9] + x[22] + v[10] + v[11] + v[12] + v[13]);
   v[15] = x[13] * x[1];
   v[16] = x[12] * x[0];
   v[17] = x[14] * v[2];
   v[18] = x[15] * v[4];
   v[19] = x[16] * v[6];
   v[20] = tanhf(v[15] + x[24] + v[16] + v[17] + v[18] + v[19]);
   v[21] = x[18] * x[1];
   v[22] = x[17] * x[0];
   v[23] = x[19] * v[2];
   v[24] = x[20] * v[4];
   v[25] = x[21] * v[6];
   v[26] = tanhf(v[21] + x[25] + v[22] + v[23] + v[24] + v[25]);
   v[27] = x[31] * v[8] + x[35] + x[30] * v[14] + x[32] * v[20] + x[33] * v[26];
   v[28] = x[1] + 0.05 * v[27];
   v[26] = x[27] * v[8] + x[34] + x[26] * v[14] + x[28] * v[20] + x[29] * v[26];
   v[20] = x[0] + 0.05 * v[26];
   v[14] = v[20] * v[20];
   v[8] = v[28] * v[28];
   v[29] = v[20] * v[28];
   v[30] = tanhf(x[8] * v[28] + x[23] + x[7] * v[20] + x[9] * v[14] + x[10] * v[8] + x[11] * v[29]);
   v[31] = tanhf(x[3] * v[28] + x[22] + x[2] * v[20] + x[4] * v[14] + x[5] * v[8] + x[6] * v[29]);
   v[32] = tanhf(x[13] * v[28] + x[24] + x[12] * v[20] + x[14] * v[14] + x[15] * v[8] + x[16] * v[29]);
   v[29] = tanhf(x[18] * v[28] + x[25] + x[17] * v[20] + x[19] * v[14] + x[20] * v[8] + x[21] * v[29]);
   v[8] = x[27] * v[30] + x[34] + x[26] * v[31] + x[28] * v[32] + x[29] * v[29];
   v[29] = x[31] * v[30] + x[35] + x[30] * v[31] + x[32] * v[32] + x[33] * v[29];
   v[32] = x[1] + 0.05 * v[29];
   v[31] = x[0] + 0.05 * v[8];
   v[30] = v[31] * v[31];
   v[14] = v[32] * v[32];
   v[20] = v[31] * v[32];
   v[28] = tanhf(x[8] * v[32] + x[23] + x[7] * v[31] + x[9] * v[30] + x[10] * v[14] + x[11] * v[20]);
   v[33] = tanhf(x[3] * v[32] + x[22] + x[2] * v[31] + x[4] * v[30] + x[5] * v[14] + x[6] * v[20]);
   v[34] = tanhf(x[13] * v[32] + x[24] + x[12] * v[31] + x[14] * v[30] + x[15] * v[14] + x[16] * v[20]);
   v[20] = tanhf(x[18] * v[32] + x[25] + x[17] * v[31] + x[19] * v[30] + x[20] * v[14] + x[21] * v[20]);
   v[14] = x[27] * v[28] + x[34] + x[26] * v[33] + x[28] * v[34] + x[29] * v[20];
   v[20] = x[31] * v[28] + x[35] + x[30] * v[33] + x[32] * v[34] + x[33] * v[20];
   v[34] = x[1] + 0.1 * v[20];
   v[33] = x[0] + 0.1 * v[14];
   v[28] = v[33] * v[33];
   v[30] = v[34] * v[34];
   v[31] = v[33] * v[34];
   v[32] = tanhf(x[8] * v[34] + x[23] + x[7] * v[33] + x[9] * v[28] + x[10] * v[30] + x[11] * v[31]);
   v[35] = tanhf(x[3] * v[34] + x[22] + x[2] * v[33] + x[4] * v[28] + x[5] * v[30] + x[6] * v[31]);
   v[36] = tanhf(x[13] * v[34] + x[24] + x[12] * v[33] + x[14] * v[28] + x[15] * v[30] + x[16] * v[31]);
   v[31] = tanhf(x[18] * v[34] + x[25] + x[17] * v[33] + x[19] * v[28] + x[20] * v[30] + x[21] * v[31]);
   y[0] = x[0] + 0.0166667 * (2. * v[8] + x[34] + v[26] + 2. * v[14] + x[27] * v[32] + x[26] * v[35] + x[28] * v[36] + x[29] * v[31]);
   y[1] = x[1] + 0.0166667 * (2. * v[29] + x[35] + v[27] + 2. * v[20] + x[31] * v[32] + x[30] * v[35] + x[32] * v[36] + x[33] * v[31]);
   v[31] = x[0] + x[0];
   v[36] = x[4] * v[31] + x[2] + x[6] * x[1];
   v[35] = tanhf(v[9] + x[22] + v[10] + v[11] + v[12] + v[13]);
   v[32] = v[35] * v[35];
   v[36] = v[36] - v[36] * v[32];
   v[20] = x[9] * v[31] + x[7] + x[11] * x[1];
   v[29] = tanhf(v[0] + x[23] + v[1] + v[3] + v[5] + v[7]);
   v[27] = v[29] * v[29];
   v[20] = v[20] - v[20] * v[27];
   v[14] = x[14] * v[31] + x[12] + x[16] * x[1];
   v[8] = tanhf(v[15] + x[24] + v[16] + v[17] + v[18] + v[19]);
   v[26] = v[8] * v[8];
   v[14] = v[14] - v[14] * v[26];
   v[31] = x[19] * v[31] + x[17] + x[21] * x[1];
   v[30] = tanhf(v[21] + x[25] + v[22] + v[23] + v[24] + v[25]);
   v[28] = v[30] * v[30];
   v[31] = v[31] - v[31] * v[28];
   v[33] = x[26] * v[36] + x[27] * v[20] + x[28] * v[14] + x[29] * v[31];
   v[34] = 1 + 0.05 * v[33];
   v[31] = x[30] * v[36] + x[31] * v[20] + x[32] * v[14] + x[33] * v[31];
   v[14] = 0.05 * v[31];
   v[20] = x[0] + 0.05 * (x[27] * v[29] + x[34] + x[26] * v[35] + x[28] * v[8] + x[29] * v[30]);
   v[36] = v[34] * v[20];
   v[36] = v[36] + v[36];
   v[30] = x[1] + 0.05 * (x[31] * v[29] + x[35] + x[30] * v[35] + x[32] * v[8] + x[33] * v[30]);
   v[8] = v[14] * v[30];
   v[8] = v[8] + v[8];
   v[29] = v[34] * v[30] + v[20] * v[14];
   v[35] = x[2] * v[34] + x[3] * v[14] + x[4] * v[36] + x[5] * v[8] + x[6] * v[29];
   v[37] = v[20] * v[20];
   v[38] = v[30] * v[30];
   v[39] = v[20] * v[30];
   v[40] = tanhf(x[3] * v[30] + x[22] + x[2] * v[20] + x[4] * v[37] + x[5] * v[38] + x[6] * v[39]);
   v[41] = v[40] * v[40];
   v[35] = v[35] - v[35] * v[41];
   v[42] = x[7] * v[34] + x[8] * v[14] + x[9] * v[36] + x[10] * v[8] + x[11] * v[29];
   v[43] = tanhf(x[8] * v[30] + x[23] + x[7] * v[20] + x[9] * v[37] + x[10] * v[38] + x[11] * v[39]);
   v[44] = v[43] * v[43];
   v[42] = v[42] - v[42] * v[44];
   v[45] = x[12] * v[34] + x[13] * v[14] + x[14] * v[36] + x[15] * v[8] + x[16] * v[29];
   v[46] = tanhf(x[13] * v[30] + x[24] + x[12] * v[20] + x[14] * v[37] + x[15] * v[38] + x[16] * v[39]);
   v[47] = v[46] * v[46];
   v[45] = v[45] - v[45] * v[47];
   v[29] = x[17] * v[34] + x[18] * v[14] + x[19] * v[36] + x[20] * v[8] + x[21] * v[29];
   v[39] = tanhf(x[18] * v[30] + x[25] + x[17] * v[20] + x[19] * v[37] + x[20] * v[38] + x[21] * v[39]);
   v[38] = v[39] * v[39];
   v[29] = v[29] - v[29] * v[38];
   v[37] = x[26] * v[35] + x[27] * v[42] + x[28] * v[45] + x[29] * v[29];
   v[8] = 1 + 0.05 * v[37];
   v[29] = x[30] * v[35] + x[31] * v[42] + x[32] * v[45] + x[33] * v[29];
   v[45] = 0.05 * v[29];
   v[42] = x[0] + 0.05 * (x[27] * v[43] + x[34] + x[26] * v[40] + x[28] * v[46] + x[29] * v[39]);
   v[35] = v[8] * v[42];
   v[35] = v[35] + v[35];
   v[39] = x[1] + 0.05 * (x[31] * v[43] + x[35] + x[30] * v[40] + x[32] * v[46] + x[33] * v[39]);
   v[46] = v[45] * v[39];
   v[46] = v[46] + v[46];
   v[43] = v[8] * v[39] + v[42] * v[45];
   v[40] = x[2] * v[8] + x[3] * v[45] + x[4] * v[35] + x[5] * v[46] + x[6] * v[43];
   v[36] = v[42] * v[42];
   v[14] = v[39] * v[39];
   v[34] = v[42] * v[39];
   v[48] = tanhf(x[3] * v[39] + x[22] + x[2] * v[42] + x[4] * v[36] + x[5] * v[14] + x[6] * v[34]);
   v[49] = v[48] * v[48];
   v[40] = v[40] - v[40] * v[49];
   v[50] = x[7] * v[8] + x[8] * v[45] + x[9] * v[35] + x[10] * v[46] + x[11] * v[43];
   v[51] = tanhf(x[8] * v[39] + x[23] + x[7] * v[42] + x[9] * v[36] + x[10] * v[14] + x[11] * v[34]);
   v[52] = v[51] * v[51];
   v[50] = v[50] - v[50] * v[52];
   v[53] = x[12] * v[8] + x[13] * v[45] + x[14] * v[35] + x[15] * v[46] + x[16] * v[43];
   v[54] = tanhf(x[13] * v[39] + x[24] + x[12] * v[42] + x[14] * v[36] + x[15] * v[14] + x[16] * v[34]);
   v[55] = v[54] * v[54];
   v[53] = v[53] - v[53] * v[55];
   v[43] = x[17] * v[8] + x[18] * v[45] + x[19] * v[35] + x[20] * v[46] + x[21] * v[43];
   v[34] = tanhf(x[18] * v[39] + x[25] + x[17] * v[42] + x[19] * v[36] + x[20] * v[14] + x[21] * v[34]);
   v[14] = v[34] * v[34];
   v[43] = v[43] - v[43] * v[14];
   v[36] = x[26] * v[40] + x[27] * v[50] + x[28] * v[53] + x[29] * v[43];
   v[46] = 1 + 0.1 * v[36];
   v[43] = x[30] * v[40] + x[31] * v[50] + x[32] * v[53] + x[33] * v[43];
   v[53] = 0.1 * v[43];
   v[50] = x[0] + 0.1 * (x[27] * v[51] + x[34] + x[26] * v[48] + x[28] * v[54] + x[29] * v[34]);
   v[40] = v[46] * v[50];
   v[40] = v[40] + v[40];
   v[34] = x[1] + 0.1 * (x[31] * v[51] + x[35] + x[30] * v[48] + x[32] * v[54] + x[33] * v[34]);
   v[54] = v[53] * v[34];
   v[54] = v[54] + v[54];
   v[51] = v[46] * v[34] + v[50] * v[53];
   v[48] = x[7] * v[46] + x[8] * v[53] + x[9] * v[40] + x[10] * v[54] + x[11] * v[51];
   v[35] = v[50] * v[50];
   v[45] = v[34] * v[34];
   v[8] = v[50] * v[34];
   v[56] = tanhf(x[8] * v[34] + x[23] + x[7] * v[50] + x[9] * v[35] + x[10] * v[45] + x[11] * v[8]);
   v[56] = v[56] * v[56];
   v[48] = v[48] - v[48] * v[56];
   v[57] = x[2] * v[46] + x[3] * v[53] + x[4] * v[40] + x[5] * v[54] + x[6] * v[51];
   v[58] = tanhf(x[3] * v[34] + x[22] + x[2] * v[50] + x[4] * v[35] + x[5] * v[45] + x[6] * v[8]);
   v[58] = v[58] * v[58];
   v[57] = v[57] - v[57] * v[58];
   v[59] = x[12] * v[46] + x[13] * v[53] + x[14] * v[40] + x[15] * v[54] + x[16] * v[51];
   v[60] = tanhf(x[13] * v[34] + x[24] + x[12] * v[50] + x[14] * v[35] + x[15] * v[45] + x[16] * v[8]);
   v[60] = v[60] * v[60];
   v[59] = v[59] - v[59] * v[60];
   v[51] = x[17] * v[46] + x[18] * v[53] + x[19] * v[40] + x[20] * v[54] + x[21] * v[51];
   v[8] = tanhf(x[18] * v[34] + x[25] + x[17] * v[50] + x[19] * v[35] + x[20] * v[45] + x[21] * v[8]);
   v[8] = v[8] * v[8];
   v[51] = v[51] - v[51] * v[8];
   y[2] = 1 + 0.0166667 * (v[33] + 2. * v[37] + 2. * v[36] + x[27] * v[48] + x[26] * v[57] + x[28] * v[59] + x[29] * v[51]);
   v[36] = x[1] + x[1];
   v[37] = x[5] * v[36] + x[3] + x[6] * x[0];
   v[37] = v[37] - v[37] * v[32];
   v[32] = x[10] * v[36] + x[8] + x[11] * x[0];
   v[32] = v[32] - v[32] * v[27];
   v[27] = x[15] * v[36] + x[13] + x[16] * x[0];
   v[27] = v[27] - v[27] * v[26];
   v[36] = x[20] * v[36] + x[18] + x[21] * x[0];
   v[36] = v[36] - v[36] * v[28];
   v[28] = x[26] * v[37] + x[27] * v[32] + x[28] * v[27] + x[29] * v[36];
   v[26] = 0.05 * v[28];
   v[36] = x[30] * v[37] + x[31] * v[32] + x[32] * v[27] + x[33] * v[36];
   v[27] = 1 + 0.05 * v[36];
   v[32] = v[26] * v[20];
   v[32] = v[32] + v[32];
   v[37] = v[27] * v[30];
   v[37] = v[37] + v[37];
   v[30] = v[26] * v[30] + v[20] * v[27];
   v[20] = x[2] * v[26] + x[3] * v[27] + x[4] * v[32] + x[5] * v[37] + x[6] * v[30];
   v[20] = v[20] - v[20] * v[41];
   v[41] = x[7] * v[26] + x[8] * v[27] + x[9] * v[32] + x[10] * v[37] + x[11] * v[30];
   v[41] = v[41] - v[41] * v[44];
   v[44] = x[12] * v[26] + x[13] * v[27] + x[14] * v[32] + x[15] * v[37] + x[16] * v[30];
   v[44] = v[44] - v[44] * v[47];
   v[30] = x[17] * v[26] + x[18] * v[27] + x[19] * v[32] + x[20] * v[37] + x[21] * v[30];
   v[30] = v[30] - v[30] * v[38];
   v[38] = x[26] * v[20] + x[27] * v[41] + x[28] * v[44] + x[29] * v[30];
   v[37] = 0.05 * v[38];
   v[30] = x[30] * v[20] + x[31] * v[41] + x[32] * v[44] + x[33] * v[30];
   v[44] = 1 + 0.05 * v[30];
   v[41] = v[37] * v[42];
   v[41] = v[41] + v[41];
   v[20] = v[44] * v[39];
   v[20] = v[20] + v[20];
   v[39] = v[37] * v[39] + v[42] * v[44];
   v[42] = x[2] * v[37] + x[3] * v[44] + x[4] * v[41] + x[5] * v[20] + x[6] * v[39];
   v[42] = v[42] - v[42] * v[49];
   v[49] = x[7] * v[37] + x[8] * v[44] + x[9] * v[41] + x[10] * v[20] + x[11] * v[39];
   v[49] = v[49] - v[49] * v[52];
   v[52] = x[12] * v[37] + x[13] * v[44] + x[14] * v[41] + x[15] * v[20] + x[16] * v[39];
   v[52] = v[52] - v[52] * v[55];
   v[39] = x[17] * v[37] + x[18] * v[44] + x[19] * v[41] + x[20] * v[20] + x[21] * v[39];
   v[39] = v[39] - v[39] * v[14];
   v[14] = x[26] * v[42] + x[27] * v[49] + x[28] * v[52] + x[29] * v[39];
   v[20] = 0.1 * v[14];
   v[39] = x[30] * v[42] + x[31] * v[49] + x[32] * v[52] + x[33] * v[39];
   v[52] = 1 + 0.1 * v[39];
   v[49] = v[20] * v[50];
   v[49] = v[49] + v[49];
   v[42] = v[52] * v[34];
   v[42] = v[42] + v[42];
   v[34] = v[20] * v[34] + v[50] * v[52];
   v[50] = x[7] * v[20] + x[8] * v[52] + x[9] * v[49] + x[10] * v[42] + x[11] * v[34];
   v[50] = v[50] - v[50] * v[56];
   v[56] = x[2] * v[20] + x[3] * v[52] + x[4] * v[49] + x[5] * v[42] + x[6] * v[34];
   v[56] = v[56] - v[56] * v[58];
   v[58] = x[12] * v[20] + x[13] * v[52] + x[14] * v[49] + x[15] * v[42] + x[16] * v[34];
   v[58] = v[58] - v[58] * v[60];
   v[34] = x[17] * v[20] + x[18] * v[52] + x[19] * v[49] + x[20] * v[42] + x[21] * v[34];
   v[34] = v[34] - v[34] * v[8];
   y[3] = 0.0166667 * (v[28] + 2. * v[38] + 2. * v[14] + x[27] * v[50] + x[26] * v[56] + x[28] * v[58] + x[29] * v[34]);
   y[4] = 0.0166667 * (v[31] + 2. * v[29] + 2. * v[43] + x[31] * v[48] + x[30] * v[57] + x[32] * v[59] + x[33] * v[51]);
   y[5] = 1 + 0.0166667 * (v[36] + 2. * v[30] + 2. * v[39] + x[31] * v[50] + x[30] * v[56] + x[32] * v[58] + x[33] * v[34]);
   v[13] = tanhf(v[10] + v[9] + v[11] + v[12] + v[13] + x[22]);
   v[7] = tanhf(v[1] + v[0] + v[3] + v[5] + v[7] + x[23]);
   v[19] = tanhf(v[16] + v[15] + v[17] + v[18] + v[19] + x[24]);
   v[25] = tanhf(v[22] + v[21] + v[23] + v[24] + v[25] + x[25]);
   v[24] = x[0] + 0.05 * (x[26] * v[13] + x[27] * v[7] + x[28] * v[19] + x[29] * v[25] + x[34]);
   v[23] = x[1] + 0.05 * (x[30] * v[13] + x[31] * v[7] + x[32] * v[19] + x[33] * v[25] + x[35]);
   v[22] = v[24] * v[24];
   v[21] = v[23] * v[23];
   v[18] = v[24] * v[23];
   v[17] = tanhf(x[2] * v[24] + x[3] * v[23] + x[4] * v[22] + x[5] * v[21] + x[6] * v[18] + x[22]);
   v[16] = tanhf(x[7] * v[24] + x[8] * v[23] + x[9] * v[22] + x[10] * v[21] + x[11] * v[18] + x[23]);
   v[15] = tanhf(x[12] * v[24] + x[13] * v[23] + x[14] * v[22] + x[15] * v[21] + x[16] * v[18] + x[24]);
   v[5] = tanhf(x[17] * v[24] + x[18] * v[23] + x[19] * v[22] + x[20] * v[21] + x[21] * v[18] + x[25]);
   v[3] = x[0] + 0.05 * (x[26] * v[17] + x[27] * v[16] + x[28] * v[15] + x[29] * v[5] + x[34]);
   v[1] = x[1] + 0.05 * (x[30] * v[17] + x[31] * v[16] + x[32] * v[15] + x[33] * v[5] + x[35]);
   v[0] = v[3] * v[3];
   v[12] = v[1] * v[1];
   v[11] = v[3] * v[1];
   v[10] = tanhf(x[2] * v[3] + x[3] * v[1] + x[4] * v[0] + x[5] * v[12] + x[6] * v[11] + x[22]);
   v[9] = tanhf(x[7] * v[3] + x[8] * v[1] + x[9] * v[0] + x[10] * v[12] + x[11] * v[11] + x[23]);
   v[34] = tanhf(x[12] * v[3] + x[13] * v[1] + x[14] * v[0] + x[15] * v[12] + x[16] * v[11] + x[24]);
   v[58] = tanhf(x[17] * v[3] + x[18] * v[1] + x[19] * v[0] + x[20] * v[12] + x[21] * v[11] + x[25]);
   v[56] = x[0] + 0.1 * (x[26] * v[10] + x[27] * v[9] + x[28] * v[34] + x[29] * v[58] + x[34]);
   v[50] = x[1] + 0.1 * (x[30] * v[10] + x[31] * v[9] + x[32] * v[34] + x[33] * v[58] + x[35]);
   v[39] = v[56] * v[56];
   v[30] = v[50] * v[50];
   v[36] = v[56] * v[50];
   v[51] = tanhf(x[12] * v[56] + x[13] * v[50] + x[14] * v[39] + x[15] * v[30] + x[16] * v[36] + x[24]);
   v[59] = v[51] * v[51];
   v[57] = 0.0166667 * x[28] * (1 - v[59]);
   v[48] = tanhf(x[17] * v[56] + x[18] * v[50] + x[19] * v[39] + x[20] * v[30] + x[21] * v[36] + x[25]);
   v[43] = v[48] * v[48];
   v[29] = 0.0166667 * x[29] * (1 - v[43]);
   v[31] = tanhf(x[7] * v[56] + x[8] * v[50] + x[9] * v[39] + x[10] * v[30] + x[11] * v[36] + x[23]);
   v[14] = v[31] * v[31];
   v[38] = 0.0166667 * x[27] * (1 - v[14]);
   v[28] = tanhf(x[2] * v[56] + x[3] * v[50] + x[4] * v[39] + x[5] * v[30] + x[6] * v[36] + x[22]);
   v[8] = v[28] * v[28];
   v[42] = 0.0166667 * x[26] * (1 - v[8]);
   v[49] = v[57] * x[16] + v[29] * x[21] + v[38] * x[11] + v[42] * x[6];
   v[52] = (v[57] * x[15] + v[29] * x[20] + v[38] * x[10] + v[42] * x[5]) * v[50];
   v[52] = (v[57] * x[13] + v[29] * x[18] + v[38] * x[8] + v[42] * x[3] + v[49] * v[56] + v[52] + v[52]) * 0.1;
   v[20] = (v[57] * x[14] + v[29] * x[19] + v[38] * x[9] + v[42] * x[4]) * v[56];
   v[20] = 0.0333333 + (v[57] * x[12] + v[29] * x[17] + v[38] * x[7] + v[42] * x[2] + v[49] * v[50] + v[20] + v[20]) * 0.1;
   v[49] = v[10] * v[10];
   v[60] = (v[52] * x[30] + v[20] * x[26]) * (1 - v[49]);
   v[41] = v[34] * v[34];
   v[44] = (v[52] * x[32] + v[20] * x[28]) * (1 - v[41]);
   v[37] = v[58] * v[58];
   v[55] = (v[52] * x[33] + v[20] * x[29]) * (1 - v[37]);
   v[32] = v[9] * v[9];
   v[27] = (v[52] * x[31] + v[20] * x[27]) * (1 - v[32]);
   v[26] = v[44] * x[16] + v[55] * x[21] + v[27] * x[11] + v[60] * x[6];
   v[47] = (v[44] * x[15] + v[55] * x[20] + v[27] * x[10] + v[60] * x[5]) * v[1];
   v[47] = (v[44] * x[13] + v[55] * x[18] + v[27] * x[8] + v[60] * x[3] + v[26] * v[3] + v[47] + v[47]) * 0.05;
   v[33] = (v[44] * x[14] + v[55] * x[19] + v[27] * x[9] + v[60] * x[4]) * v[3];
   v[33] = 0.0333333 + (v[44] * x[12] + v[55] * x[17] + v[27] * x[7] + v[60] * x[2] + v[26] * v[1] + v[33] + v[33]) * 0.05;
   v[26] = v[17] * v[17];
   v[45] = (v[47] * x[30] + v[33] * x[26]) * (1 - v[26]);
   v[35] = v[15] * v[15];
   v[54] = (v[47] * x[32] + v[33] * x[28]) * (1 - v[35]);
   v[40] = v[5] * v[5];
   v[53] = (v[47] * x[33] + v[33] * x[29]) * (1 - v[40]);
   v[46] = v[16] * v[16];
   v[61] = (v[47] * x[31] + v[33] * x[27]) * (1 - v[46]);
   v[62] = v[54] * x[16] + v[53] * x[21] + v[61] * x[11] + v[45] * x[6];
   v[63] = (v[54] * x[15] + v[53] * x[20] + v[61] * x[10] + v[45] * x[5]) * v[23];
   v[63] = (v[54] * x[13] + v[53] * x[18] + v[61] * x[8] + v[45] * x[3] + v[62] * v[24] + v[63] + v[63]) * 0.05;
   v[64] = (v[54] * x[14] + v[53] * x[19] + v[61] * x[9] + v[45] * x[4]) * v[24];
   v[64] = 0.0166667 + (v[54] * x[12] + v[53] * x[17] + v[61] * x[7] + v[45] * x[2] + v[62] * v[23] + v[64] + v[64]) * 0.05;
   v[62] = v[13] * v[13];
   v[65] = (v[63] * x[30] + v[64] * x[26]) * (1 - v[62]);
   y[6] = v[60] * v[3] + v[42] * v[56] + v[45] * v[24] + v[65] * x[0];
   y[7] = v[60] * v[1] + v[42] * v[50] + v[45] * v[23] + v[65] * x[1];
   y[8] = v[60] * v[0] + v[42] * v[39] + v[45] * v[22] + v[65] * v[2];
   y[9] = v[60] * v[12] + v[42] * v[30] + v[45] * v[21] + v[65] * v[4];
   y[10] = v[60] * v[11] + v[42] * v[36] + v[45] * v[18] + v[65] * v[6];
   v[66] = v[7] * v[7];
   v[67] = (v[63] * x[31] + v[64] * x[27]) * (1 - v[66]);
   y[11] = v[27] * v[3] + v[38] * v[56] + v[61] * v[24] + v[67] * x[0];
   y[12] = v[27] * v[1] + v[38] * v[50] + v[61] * v[23] + v[67] * x[1];
   y[13] = v[27] * v[0] + v[38] * v[39] + v[61] * v[22] + v[67] * v[2];
   y[14] = v[27] * v[12] + v[38] * v[30] + v[61] * v[21] + v[67] * v[4];
   y[15] = v[27] * v[11] + v[38] * v[36] + v[61] * v[18] + v[67] * v[6];
   v[68] = v[19] * v[19];
   v[69] = (v[63] * x[32] + v[64] * x[28]) * (1 - v[68]);
   y[16] = v[44] * v[3] + v[57] * v[56] + v[54] * v[24] + v[69] * x[0];
   y[17] = v[44] * v[1] + v[57] * v[50] + v[54] * v[23] + v[69] * x[1];
   y[18] = v[44] * v[0] + v[57] * v[39] + v[54] * v[22] + v[69] * v[2];
   y[19] = v[44] * v[12] + v[57] * v[30] + v[54] * v[21] + v[69] * v[4];
   y[20] = v[44] * v[11] + v[57] * v[36] + v[54] * v[18] + v[69] * v[6];
   v[70] = v[25] * v[25];
   v[71] = (v[63] * x[33] + v[64] * x[29]) * (1 - v[70]);
   y[21] = v[55] * v[3] + v[29] * v[56] + v[53] * v[24] + v[71] * x[0];
   y[22] = v[55] * v[1] + v[29] * v[50] + v[53] * v[23] + v[71] * x[1];
   y[23] = v[55] * v[0] + v[29] * v[39] + v[53] * v[22] + v[71] * v[2];
   y[24] = v[55] * v[12] + v[29] * v[30] + v[53] * v[21] + v[71] * v[4];
   y[25] = v[55] * v[11] + v[29] * v[36] + v[53] * v[18] + v[71] * v[6];
   y[26] = v[60] + v[42] + v[45] + v[65];
   y[27] = v[27] + v[38] + v[61] + v[67];
   y[28] = v[44] + v[57] + v[54] + v[69];
   y[29] = v[55] + v[29] + v[53] + v[71];
   y[30] = v[20] * v[10] + 0.0166667 * v[28] + v[33] * v[17] + v[64] * v[13];
   y[31] = v[20] * v[9] + 0.0166667 * v[31] + v[33] * v[16] + v[64] * v[7];
   y[32] = v[20] * v[34] + 0.0166667 * v[51] + v[33] * v[15] + v[64] * v[19];
   y[33] = v[20] * v[58] + 0.0166667 * v[48] + v[33] * v[5] + v[64] * v[25];
   y[34] = v[47] * v[17] + v[52] * v[10] + v[63] * v[13];
   y[35] = v[47] * v[16] + v[52] * v[9] + v[63] * v[7];
   y[36] = v[47] * v[15] + v[52] * v[34] + v[63] * v[19];
   y[37] = v[47] * v[5] + v[52] * v[58] + v[63] * v[25];
   y[38] = 0.0166667 + v[20] + v[33] + v[64];
   y[39] = v[47] + v[52] + v[63];
   v[59] = 0.0166667 * x[32] * (1 - v[59]);
   v[43] = 0.0166667 * x[33] * (1 - v[43]);
   v[14] = 0.0166667 * x[31] * (1 - v[14]);
   v[8] = 0.0166667 * x[30] * (1 - v[8]);
   v[63] = v[59] * x[16] + v[43] * x[21] + v[14] * x[11] + v[8] * x[6];
   v[47] = (v[59] * x[15] + v[43] * x[20] + v[14] * x[10] + v[8] * x[5]) * v[50];
   v[47] = 0.0333333 + (v[59] * x[13] + v[43] * x[18] + v[14] * x[8] + v[8] * x[3] + v[63] * v[56] + v[47] + v[47]) * 0.1;
   v[52] = (v[59] * x[14] + v[43] * x[19] + v[14] * x[9] + v[8] * x[4]) * v[56];
   v[52] = (v[59] * x[12] + v[43] * x[17] + v[14] * x[7] + v[8] * x[2] + v[63] * v[50] + v[52] + v[52]) * 0.1;
   v[49] = (v[47] * x[30] + v[52] * x[26]) * (1 - v[49]);
   v[41] = (v[47] * x[32] + v[52] * x[28]) * (1 - v[41]);
   v[37] = (v[47] * x[33] + v[52] * x[29]) * (1 - v[37]);
   v[32] = (v[47] * x[31] + v[52] * x[27]) * (1 - v[32]);
   v[63] = v[41] * x[16] + v[37] * x[21] + v[32] * x[11] + v[49] * x[6];
   v[64] = (v[41] * x[15] + v[37] * x[20] + v[32] * x[10] + v[49] * x[5]) * v[1];
   v[64] = 0.0333333 + (v[41] * x[13] + v[37] * x[18] + v[32] * x[8] + v[49] * x[3] + v[63] * v[3] + v[64] + v[64]) * 0.05;
   v[33] = (v[41] * x[14] + v[37] * x[19] + v[32] * x[9] + v[49] * x[4]) * v[3];
   v[33] = (v[41] * x[12] + v[37] * x[17] + v[32] * x[7] + v[49] * x[2] + v[63] * v[1] + v[33] + v[33]) * 0.05;
   v[26] = (v[64] * x[30] + v[33] * x[26]) * (1 - v[26]);
   v[35] = (v[64] * x[32] + v[33] * x[28]) * (1 - v[35]);
   v[40] = (v[64] * x[33] + v[33] * x[29]) * (1 - v[40]);
   v[46] = (v[64] * x[31] + v[33] * x[27]) * (1 - v[46]);
   v[63] = v[35] * x[16] + v[40] * x[21] + v[46] * x[11] + v[26] * x[6];
   v[20] = (v[35] * x[15] + v[40] * x[20] + v[46] * x[10] + v[26] * x[5]) * v[23];
   v[20] = 0.0166667 + (v[35] * x[13] + v[40] * x[18] + v[46] * x[8] + v[26] * x[3] + v[63] * v[24] + v[20] + v[20]) * 0.05;
   v[71] = (v[35] * x[14] + v[40] * x[19] + v[46] * x[9] + v[26] * x[4]) * v[24];
   v[71] = (v[35] * x[12] + v[40] * x[17] + v[46] * x[7] + v[26] * x[2] + v[63] * v[23] + v[71] + v[71]) * 0.05;
   v[62] = (v[20] * x[30] + v[71] * x[26]) * (1 - v[62]);
   y[40] = v[49] * v[3] + v[8] * v[56] + v[26] * v[24] + v[62] * x[0];
   y[41] = v[49] * v[1] + v[8] * v[50] + v[26] * v[23] + v[62] * x[1];
   y[42] = v[49] * v[0] + v[8] * v[39] + v[26] * v[22] + v[62] * v[2];
   y[43] = v[49] * v[12] + v[8] * v[30] + v[26] * v[21] + v[62] * v[4];
   y[44] = v[49] * v[11] + v[8] * v[36] + v[26] * v[18] + v[62] * v[6];
   v[66] = (v[20] * x[31] + v[71] * x[27]) * (1 - v[66]);
   y[45] = v[32] * v[3] + v[14] * v[56] + v[46] * v[24] + v[66] * x[0];
   y[46] = v[32] * v[1] + v[14] * v[50] + v[46] * v[23] + v[66] * x[1];
   y[47] = v[32] * v[0] + v[14] * v[39] + v[46] * v[22] + v[66] * v[2];
   y[48] = v[32] * v[12] + v[14] * v[30] + v[46] * v[21] + v[66] * v[4];
   y[49] = v[32] * v[11] + v[14] * v[36] + v[46] * v[18] + v[66] * v[6];
   v[68] = (v[20] * x[32] + v[71] * x[28]) * (1 - v[68]);
   y[50] = v[41] * v[3] + v[59] * v[56] + v[35] * v[24] + v[68] * x[0];
   y[51] = v[41] * v[1] + v[59] * v[50] + v[35] * v[23] + v[68] * x[1];
   y[52] = v[41] * v[0] + v[59] * v[39] + v[35] * v[22] + v[68] * v[2];
   y[53] = v[41] * v[12] + v[59] * v[30] + v[35] * v[21] + v[68] * v[4];
   y[54] = v[41] * v[11] + v[59] * v[36] + v[35] * v[18] + v[68] * v[6];
   v[70] = (v[20] * x[33] + v[71] * x[29]) * (1 - v[70]);
   y[55] = v[37] * v[3] + v[43] * v[56] + v[40] * v[24] + v[70] * x[0];
   y[56] = v[37] * v[1] + v[43] * v[50] + v[40] * v[23] + v[70] * x[1];
   y[57] = v[37] * v[0] + v[43] * v[39] + v[40] * v[22] + v[70] * v[2];
   y[58] = v[37] * v[12] + v[43] * v[30] + v[40] * v[21] + v[70] * v[4];
   y[59] = v[37] * v[11] + v[43] * v[36] + v[40] * v[18] + v[70] * v[6];
   y[60] = v[49] + v[8] + v[26] + v[62];
   y[61] = v[32] + v[14] + v[46] + v[66];
   y[62] = v[41] + v[59] + v[35] + v[68];
   y[63] = v[37] + v[43] + v[40] + v[70];
   y[64] = v[33] * v[17] + v[52] * v[10] + v[71] * v[13];
   y[65] = v[33] * v[16] + v[52] * v[9] + v[71] * v[7];
   y[66] = v[33] * v[15] + v[52] * v[34] + v[71] * v[19];
   y[67] = v[33] * v[5] + v[52] * v[58] + v[71] * v[25];
   y[68] = v[47] * v[10] + 0.0166667 * v[28] + v[64] * v[17] + v[20] * v[13];
   y[69] = v[47] * v[9] + 0.0166667 * v[31] + v[64] * v[16] + v[20] * v[7];
   y[70] = v[47] * v[34] + 0.0166667 * v[51] + v[64] * v[15] + v[20] * v[19];
   y[71] = v[47] * v[58] + 0.0166667 * v[48] + v[64] * v[5] + v[20] * v[25];
   y[72] = v[33] + v[52] + v[71];
   y[73] = 0.0166667 + v[47] + v[64] + v[20];
   v[20] = x[8] * y[1];
   v[64] = x[7] * y[0];
   v[47] = y[0] * y[0];
   v[71] = x[9] * v[47];
   v[33] = y[1] * y[1];
   v[52] = x[10] * v[33];
   v[48] = y[0] * y[1];
   v[58] = x[11] * v[48];
   v[5] = tanhf(v[20] + v[64] + v[71] + v[52] + v[58] + x[23]);
   v[25] = x[3] * y[1];
   v[51] = x[2] * y[0];
   v[34] = x[4] * v[47];
   v[15] = x[5] * v[33];
   v[19] = x[6] * v[48];
   v[31] = tanhf(v[25] + v[51] + v[34] + v[15] + v[19] + x[22]);
   v[9] = x[13] * y[1];
   v[16] = x[12] * y[0];
   v[7] = x[14] * v[47];
   v[28] = x[15] * v[33];
   v[10] = x[16] * v[48];
   v[17] = tanhf(v[9] + v[16] + v[7] + v[28] + v[10] + x[24]);
   v[13] = x[18] * y[1];
   v[70] = x[17] * y[0];
   v[40] = x[19] * v[47];
   v[37] = x[20] * v[33];
   v[43] = x[21] * v[48];
   v[68] = tanhf(v[13] + v[70] + v[40] + v[37] + v[43] + x[25]);
   v[35] = x[31] * v[5] + x[30] * v[31] + x[32] * v[17] + x[33] * v[68] + x[35];
   v[41] = x[27] * v[5] + x[26] * v[31] + x[28] * v[17] + x[29] * v[68] + x[34];
   v[59] = expf(-10. * (fabsf(v[41]) + fabsf(v[35]))) * -10.;
   y[107] = ((v[35] > 0?1:(v[35] < 0?-1:0))) * v[59];
   y[106] = ((v[41] > 0?1:(v[41] < 0?-1:0))) * v[59];
   y[94] = (y[107] * x[30] + y[106] * x[26]) * (1 - v[31] * v[31]);
   y[74] = y[94] * y[0];
   y[75] = y[94] * y[1];
   y[76] = y[94] * v[47];
   y[77] = y[94] * v[33];
   y[78] = y[94] * v[48];
   y[95] = (y[107] * x[31] + y[106] * x[27]) * (1 - v[5] * v[5]);
   y[79] = y[95] * y[0];
   y[80] = y[95] * y[1];
   y[81] = y[95] * v[47];
   y[82] = y[95] * v[33];
   y[83] = y[95] * v[48];
   y[96] = (y[107] * x[32] + y[106] * x[28]) * (1 - v[17] * v[17]);
   y[84] = y[96] * y[0];
   y[85] = y[96] * y[1];
   y[86] = y[96] * v[47];
   y[87] = y[96] * v[33];
   y[88] = y[96] * v[48];
   y[97] = (y[107] * x[33] + y[106] * x[29]) * (1 - v[68] * v[68]);
   y[89] = y[97] * y[0];
   y[90] = y[97] * y[1];
   y[91] = y[97] * v[47];
   y[92] = y[97] * v[33];
   y[93] = y[97] * v[48];
   y[98] = y[106] * v[31];
   y[99] = y[106] * v[5];
   y[100] = y[106] * v[17];
   y[101] = y[106] * v[68];
   y[102] = y[107] * v[31];
   y[103] = y[107] * v[5];
   y[104] = y[107] * v[17];
   y[105] = y[107] * v[68];
   v[58] = tanhf(v[20] + x[23] + v[64] + v[71] + v[52] + v[58]);
   v[19] = tanhf(v[25] + x[22] + v[51] + v[34] + v[15] + v[19]);
   v[10] = tanhf(v[9] + x[24] + v[16] + v[7] + v[28] + v[10]);
   v[43] = tanhf(v[13] + x[25] + v[70] + v[40] + v[37] + v[43]);
   v[37] = x[31] * v[58] + x[35] + x[30] * v[19] + x[32] * v[10] + x[33] * v[43];
   v[40] = x[27] * v[58] + x[34] + x[26] * v[19] + x[28] * v[10] + x[29] * v[43];
   v[70] = expf(-10. * (fabsf(v[40]) + fabsf(v[37])));
   v[13] = v[70] * -10.;
   v[37] = ((v[37] > 0?1:(v[37] < 0?-1:0))) * v[13];
   v[13] = ((v[40] > 0?1:(v[40] < 0?-1:0))) * v[13];
   v[10] = (v[37] * x[32] + v[13] * x[28]) * (1 - v[10] * v[10]);
   v[43] = (v[37] * x[33] + v[13] * x[29]) * (1 - v[43] * v[43]);
   v[58] = (v[37] * x[31] + v[13] * x[27]) * (1 - v[58] * v[58]);
   v[13] = (v[37] * x[30] + v[13] * x[26]) * (1 - v[19] * v[19]);
   v[37] = v[10] * x[16] + v[43] * x[21] + v[58] * x[11] + v[13] * x[6];
   v[33] = 0.1 - v[33] - v[47];
   v[47] = v[33] + v[33];
   v[19] = (v[10] * x[14] + v[43] * x[19] + v[58] * x[9] + v[13] * x[4] - v[47]) * y[0];
   y[108] = v[10] * x[12] + v[43] * x[17] + v[58] * x[7] + v[13] * x[2] + v[37] * y[1] + v[19] + v[19];
   v[47] = (v[10] * x[15] + v[43] * x[20] + v[58] * x[10] + v[13] * x[5] - v[47]) * y[1];
   y[109] = v[10] * x[13] + v[43] * x[18] + v[58] * x[8] + v[13] * x[3] + v[37] * y[0] + v[47] + v[47];
   y[110] = v[33] * v[33] + v[70];

   idx = 0;
   for(int i = 0; i < xk1.size(); i++)
   {
      xk1[i] = y[idx+i];
   }
   idx += xk1.size();
   for(int i = 0; i < partial_state_state.size(); i++)
   {
      partial_state_state[i] = y[idx+i];
   }
   idx += partial_state_state.size();
   for(int i = 0; i < partial_state_param.size(); i++)
   {
      partial_state_param[i] = y[idx+i];
   }
   idx += partial_state_param.size();
   for(int i = 0; i < partial_loss_params.size(); i++)
   {
      partial_loss_params[i] = y[idx+i];
   }
   idx += partial_loss_params.size();
   for(int i = 0; i < partial_loss_state.size(); i++)
   {
      partial_loss_state[i] = y[idx+i];
   }
   idx += partial_loss_state.size();
   loss = y[idx];
}



